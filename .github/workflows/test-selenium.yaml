name: Test Management UI with Selenium
on:
  push:
    branches:
    - pjk25/oidc-integration-github-action
jobs:
  selenimum:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        erlang_version:
        - "24.3.4.3"
        browser:
        - chrome
        include:
        - erlang_version: "24.3.4.3"
          elixir_version: 1.12.3
    env:
      SELENIUM_DIR: deps/rabbitmq_management/selenium
      DOCKER_NETWORK: rabbitmq_net
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure OTP & Elixir
      uses: erlef/setup-beam@v1.12
      with:
        otp-version: ${{ matrix.erlang_version }}
        elixir-version: ${{ matrix.elixir_version }}

    - name: Mount Bazel Cache
      uses: actions/cache@v3.0.8
      with:
        path: "/home/runner/repo-cache/"
        key: repo-cache

    - name: Configure Bazel
      run: |
        ERLANG_HOME="$(dirname $(dirname $(which erl)))"
        ELIXIR_HOME="$(dirname $(dirname $(which iex)))"
        if [ -n "${{ secrets.BUILDBUDDY_API_KEY }}" ]; then
        cat << EOF >> user.bazelrc
          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
        EOF
        fi
        cat << EOF >> user.bazelrc
          build:buildbuddy --build_metadata=ROLE=CI
          build:buildbuddy --build_metadata=VISIBILITY=PRIVATE
          build:buildbuddy --repository_cache=/home/runner/repo-cache/
          build:buildbuddy --color=yes
          build:buildbuddy --disk_cache=

          build:buildbuddy --remote_download_toplevel

          build --@rules_erlang//:erlang_version=${{ matrix.erlang_version }}
          build --@rules_erlang//:erlang_home=${ERLANG_HOME}
          build --//:elixir_home=${ELIXIR_HOME}
          build --platforms=//bazel/platforms:erlang_external_platform
          build --extra_execution_platforms=//bazel/platforms:erlang_external_platform

          build --@io_bazel_rules_docker//transitions:enable=false
        EOF

    - name: Build & Load RabbitMQ OCI
      run: |
        bazelisk run packaging/docker-image:rabbitmq \
          --config=buildbuddy

    #! - name: Load RabbitMQ OCI
    #!   run: |
    #!     bazelisk run packaging/docker-image:rabbitmq \
    #!       --config=buildbuddy

    - name: Configure Docker Network
      run: |
        docker network create ${DOCKER_NETWORK}

    - name: Start RabbitMQ
      run: |
        RABBITMQ_CONFIG="${PWD}/${SELENIUM_DIR}/test/oauth/with-uaa/rabbitmq.config"
        ENABLED_PLUGINS="${PWD}/${SELENIUM_DIR}/bin/enabled_plugins"
        docker run \
          --detach \
          --name local-rabbitmq \
          --net ${DOCKER_NETWORK} \
          -p 15672:15672 -p 5672:5672 \
          -v ${RABBITMQ_CONFIG}:/etc/rabbitmq/rabbitmq.config:ro \
          -v ${ENABLED_PLUGINS}:/etc/rabbitmq/enabled_plugins \
          bazel/packaging/docker-image:rabbitmq

    - name: Start Selenium
      run: |
        docker run \
          --detach \
          --name selenium \
          --net ${DOCKER_NETWORK} \
          -p 4444:4444 \
          --shm-size=2g \
          selenium/standalone-chrome:103.0

    - name: Start UAA
      run: |
        UAA_CONFIG_DIR="${SELENIUM_DIR}/test/oauth/with-uaa/uaa"
        docker run \
          --detach \
          --name local-uaa \
          --net ${DOCKER_NETWORK} \
          --publish 8080:8080 \
          --mount type=bind,source=${UAA_CONFIG_DIR},target=/etc/uaa \
          --env JAVA_OPTS="-Djava.security.egd=file:/dev/./urandom" \
          uaa:latest

    - name: Build Tester Image
      working-directory: ${SELENIUM_DIR}
      run: |
        docker build -t mocha-test --target test .

    - name: Run Tests
      working-directory: ${SELENIUM_DIR}
      run: |
        docker run \
          --rm \
          --name mocha \
          --net ${DOCKER_NETWORK} \
          --env RABBITMQ_URL=http://local-rabbitmq:15672 \
          -v ${PWD}/test:/code/test mocha-test /code/test/oauth/with-uaa
    #! - name: Start Backgroung Broker
    #!   run: |
    #!     bazelisk run --config=local :rabbitmq-run \
    #!       start-background-broker \
    #!       RABBITMQ_CONFIG_FILE=deps/rabbitmq_management/selenium/test/oauth/with-uaa/rabbitmq.config \
    #!       RABBITMQ_ENABLED_PLUGINS_FILE=deps/rabbitmq_management/selenium/bin/enabled_plugins

    #! - uses: actions/setup-node@v2
    #!   with:
    #!     node-version: '18'
    #!     cache: 'npm'
    #!     cache-dependency-path: deps/rabbitmq_management/selenium/package.json

    #! - name: npm install
    #!   working-directory: deps/rabbitmq_management/selenium
    #!   run: npm i

    #! - name: Test
    #!   env:
    #!     BROWSER: ${{ matrix.browser }}
    #!     RABBITMQ_URL: http://localhost:15672
    #!   working-directory: deps/rabbitmq_management/selenium
    #!   run: npm run test

    #! - name: Build mocha-test
    #!   run: |
    #!     cd deps/rabbitmq_management/selenium
    #!     make init-tests
    #!     docker images | grep mocha-test
    #! - name: Call mocha-test
    #!   run: |
    #!     cd deps/rabbitmq_management/selenium
    #!     source bin/rabbitmq.sh
    #!     echo "running RabbitMQ..."
    #!     RABBITMQ_CONFIG=$PWD/test/oauth/with-uaa/rabbitmq.config start_rabbitmq
    #!     sleep 5
    #!     docker exec -it local-rabbitmq rabbitmqctl await_startup
    #!     make run-tests


####
# We need to run these as docker images:
#  UAA
#  RabbitMQ
#  Selenium Tests (maybe these ones could run in the host machine)
#  Selenium Hub (which runs the browser in silent mode)

# The workflow is more or less like this:
# job:build-rabbitmq-image  -> job:build-test-runner-image -> job:run-tests

# job:build-rabbitmq-image : Ideally, we do not want to push it. can we do that in github actions?
#
# job:run-tests : It runs within a container and it uses these services:
#  - rabbitmq
#  - UAA
#  - selenium-hub
# and it has this step which uses the image test-runner built by the job build-test-runner-image
